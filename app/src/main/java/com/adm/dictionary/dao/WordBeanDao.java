package com.adm.dictionary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.adm.dictionary.bean.WordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORD_BEAN".
*/
public class WordBeanDao extends AbstractDao<WordBean, Long> {

    public static final String TABLENAME = "WORD_BEAN";

    /**
     * Properties of entity WordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property En_sympol = new Property(2, String.class, "en_sympol", false, "EN_SYMPOL");
        public final static Property Am_symbol = new Property(3, String.class, "am_symbol", false, "AM_SYMBOL");
        public final static Property En_mp3 = new Property(4, String.class, "en_mp3", false, "EN_MP3");
        public final static Property Am_mp3 = new Property(5, String.class, "am_mp3", false, "AM_MP3");
        public final static Property GroupName = new Property(6, String.class, "groupName", false, "GROUP_NAME");
        public final static Property Done = new Property(7, boolean.class, "done", false, "DONE");
    }

    private DaoSession daoSession;


    public WordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORD_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"EN_SYMPOL\" TEXT," + // 2: en_sympol
                "\"AM_SYMBOL\" TEXT," + // 3: am_symbol
                "\"EN_MP3\" TEXT," + // 4: en_mp3
                "\"AM_MP3\" TEXT," + // 5: am_mp3
                "\"GROUP_NAME\" TEXT," + // 6: groupName
                "\"DONE\" INTEGER NOT NULL );"); // 7: done
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String en_sympol = entity.getEn_sympol();
        if (en_sympol != null) {
            stmt.bindString(3, en_sympol);
        }
 
        String am_symbol = entity.getAm_symbol();
        if (am_symbol != null) {
            stmt.bindString(4, am_symbol);
        }
 
        String en_mp3 = entity.getEn_mp3();
        if (en_mp3 != null) {
            stmt.bindString(5, en_mp3);
        }
 
        String am_mp3 = entity.getAm_mp3();
        if (am_mp3 != null) {
            stmt.bindString(6, am_mp3);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(7, groupName);
        }
        stmt.bindLong(8, entity.getDone() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WordBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String en_sympol = entity.getEn_sympol();
        if (en_sympol != null) {
            stmt.bindString(3, en_sympol);
        }
 
        String am_symbol = entity.getAm_symbol();
        if (am_symbol != null) {
            stmt.bindString(4, am_symbol);
        }
 
        String en_mp3 = entity.getEn_mp3();
        if (en_mp3 != null) {
            stmt.bindString(5, en_mp3);
        }
 
        String am_mp3 = entity.getAm_mp3();
        if (am_mp3 != null) {
            stmt.bindString(6, am_mp3);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(7, groupName);
        }
        stmt.bindLong(8, entity.getDone() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(WordBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WordBean readEntity(Cursor cursor, int offset) {
        WordBean entity = new WordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // en_sympol
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // am_symbol
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // en_mp3
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // am_mp3
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // groupName
            cursor.getShort(offset + 7) != 0 // done
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WordBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEn_sympol(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAm_symbol(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEn_mp3(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAm_mp3(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDone(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WordBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WordBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WordBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
